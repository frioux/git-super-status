#!/usr/bin/env perl

use 5.14.1;
use warnings;

use YAML::XS 'LoadFile';
use File::pushd;
use Term::ANSIColor;

my $data = LoadFile('/home/frew/.gitgot');

use Devel::Dwarn;

{
   my $re = sprintf q<
      ^
      # $base
      ( .{0,%i} )
      (?:
        # $fit
        ( . )
          |
        # $cut
        ( .{1,} )
      )$
      >, 39;

   sub format_repo_name {
      my $name = shift;
      my ($base, $fit, $cut) = $name =~ /$re/x;
      if (defined $fit) {
        return ( "$base${fit}" . ( ' ' x ( 39 - length $base ) ) )
      } elsif (!defined $cut) {
        return ( $base . ( ' ' x ( 40 - length $base ) ) )
      } else {
        return "$base\x{2026}";
      }
   }
}

sub get_dirty { split /\0/, qx(git status --porcelain -z) }

sub get_not_tracked {
   map {
      if (/^\*?\s+\S+\s+[a-f0-9]{7}\s\[/) {
         ()
      } else {
         $_
      }
   } split /\n/, qx(git branch -vv --no-color)
}

sub get_tracked {
   map {
      if (/^\*?\s+(\S+)\s+[a-f0-9]{7}\s\[(\S+)\]/) {
         [ $1 => $2 ]
      } else {
         ()
      }
   } split /\n/, qx(git branch -vv --no-color)
}

sub unpushed_commits {
   my @tracked = @_;

   map {
      my ($a, $b) = @$_;
      my $cmd = qq(git log $b..$a --oneline --no-color );
      $cmd, split /\n/, qx($cmd)
   } @tracked
}

sub unmerged_branches {
   split /\n/, qx(git branch --no-color -a --no-merged master)
}

sub unreleased_commits {
   return (split /\n/, qx(git log --oneline --no-color )) unless split /\n/, qx(git tag);
   chomp(my $last_tag = qx(git describe master --tags --abbrev=0));
   split /\n/, qx(git log $last_tag..master --oneline --no-color )
}

sub header {
<<'END';
D      dirty?
!TP    non-tracking branches
!PC    total unpushed commits
!MB    total unmerged branches
!RC    unreleased commits
I      issues
END
}


#    12345678901234567890123456789012345678901234567890123456789012345678901234567890
#             1         2         3         4         5         6         7         8
print header();

sub for_summary {
   my %data = @_;

   return (
      name       => $data{name},
      dirty      => scalar @{$data{dirty}},
      untracked  => scalar @{$data{untracked}},
      unpushed   => scalar @{$data{unpushed}},
      unmerged   => scalar @{$data{unmerged}},
      unreleased => scalar @{$data{unreleased}},
   )
}

sub hide_zeros {
   my %data = @_;

   return (
      name       => $data{name},
      dirty      => $data{dirty}      || '',
      untracked  => $data{untracked}  || '',
      unpushed   => $data{unpushed}   || '',
      unmerged   => $data{unmerged}   || '',
      unreleased => $data{unreleased} || '',
   )
}

sub with_color {
   my %data = @_;

   return (
      name       => colored(['yellow'], $data{name}       ),
      dirty      => colored(['red']   , $data{dirty}      ),
      untracked  => colored(['red']   , $data{untracked}  ),
      unpushed   => colored(['red']   , $data{unpushed}   ),
      unmerged   => colored(['red']   , $data{unmerged}   ),
      unreleased => colored(['red']   , $data{unreleased} ),
   )
}

sub pre_color_sprintf {
   my %data = @_;

   return (
      name       => format_repo_name( $data{name}       ),
      dirty      => sprintf('%3s',    $data{dirty}      ),
      untracked  => sprintf('%3s',    $data{untracked}  ),
      unpushed   => sprintf('%3s',    $data{unpushed}   ),
      unmerged   => sprintf('%3s',    $data{unmerged}   ),
      unreleased => sprintf('%3s',    $data{unreleased} ),
   )
}

sub fromat {
   my %data = @_;

   join ' ', $data{name}, $data{dirty}, $data{untracked}, $data{unpushed}, $data{unmerged}, $data{unreleased}, '';
}

for my $repo_info (@$data) {
   state $i = 0;
   print "\nRepository Name                            D !TP !PC !MB !RC   I\n\n"
      if $i % 10 == 0;

   my $dir = pushd($repo_info->{path});

   my %data = (
      name       => $repo_info->{name},
      dirty      => [ get_dirty() ],
      untracked  => [ get_not_tracked() ],
      unpushed   => [ unpushed_commits(get_tracked()) ],
      unmerged   => [ unmerged_branches() ],
      unreleased => [ unreleased_commits() ],
   );

   say fromat(with_color(pre_color_sprintf(hide_zeros(for_summary(%data)))));

   $i++;
}

